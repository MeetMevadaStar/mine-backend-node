/// User Table

CREATE TABLE users (
    id VARCHAR(36) PRIMARY KEY, -- UUID format
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    mobile VARCHAR(20),
    password VARCHAR(255) NOT NULL,
    role_id ENUM('admin', 'male', 'female') NOT NULL,
    pair_id VARCHAR(36),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (pair_id) REFERENCES couples(id) ON DELETE SET NULL
);




/// Couple Table
CREATE TABLE couples (
    id VARCHAR(36) PRIMARY KEY, -- UUID format
    user1_id VARCHAR(36) NOT NULL,
    user2_id VARCHAR(36) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user1_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (user2_id) REFERENCES users(id) ON DELETE CASCADE
);



-- CREATE TABLE users (
--     id UUID PRIMARY KEY,
--     first_name VARCHAR(100) NOT NULL,
--     last_name VARCHAR(100) NOT NULL,
--     email VARCHAR(255) UNIQUE NOT NULL,
--     mobile VARCHAR(20),
--     password VARCHAR(255) NOT NULL,
--     role_id VARCHAR(10) CHECK (role_id IN ('admin', 'male', 'female')) NOT NULL,
--     pair_id UUID,
--     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
--     updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
-- );

-- CREATE TABLE couples (
--     id UUID PRIMARY KEY,                        -- Unique pair ID
--     user1_id UUID NOT NULL,                     -- First user
--     user2_id UUID NOT NULL,                     -- Second user
--     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

--     -- Foreign key constraints
--     CONSTRAINT fk_user1 FOREIGN KEY (user1_id) REFERENCES users(id) ON DELETE CASCADE,
--     CONSTRAINT fk_user2 FOREIGN KEY (user2_id) REFERENCES users(id) ON DELETE CASCADE,

--     -- Prevent same user from being in both columns
--     CONSTRAINT check_different_users CHECK (user1_id <> user2_id),

--     -- Prevent duplicate pairs (user1-user2 or user2-user1)
--     CONSTRAINT unique_couple UNIQUE (
--         LEAST(user1_id::text, user2_id::text),
--         GREATEST(user1_id::text, user2_id::text)
--     )
-- );
